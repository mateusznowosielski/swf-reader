<?xml version="1.0" encoding="utf-8"?>
<renderer:ProofRenderer xmlns:fx="http://ns.adobe.com/mxml/2009"
						xmlns:s="library://ns.adobe.com/flex/spark"
						xmlns:mx="library://ns.adobe.com/flex/mx"
						xmlns:renderer="com.proofhq.proofviewer.view.application.proof.renderer.*"
						xmlns:parsley="http://www.spicefactory.org/parsley"
						xmlns:observer="http://ns.adobe.com/observer" >
	
	<fx:Declarations>
		<parsley:FastInject property="model" type="{SwfProofRendererPM}" injectionComplete="onInjectionComplete(event)"/> 
		<observer:Observe id="proofObserver" enabled="false" source="{model.proof}" handler="onProofChanged" sendArgumentsToHandler="false" />
		<observer:Observe id="playerObserver" enabled="false" source="{model.swfDetailsVO.asVersion}" handler="onPlayerTypeChanged" sendArgumentsToHandler="false" />
		<observer:Observe id="frameRateObserver" enabled="false" source="{model.swfDetailsVO.frameRate}" handler="onFrameRateChanged" sendArgumentsToHandler="false" />
		<observer:EventListener handler="handleCreateSnapshotEvent" source="{model}" type="{SwfProofRendererPM.CREATE_SNAPSHOT_INTERNAL_EVENT}" />
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import com.proofhq.proofviewer.model.pm.proof.renderer.swf.SwfProofRendererPM;
			import com.proofhq.proofviewer.util.constant.ProofType;
			
			[Bindable]
			public var model:SwfProofRendererPM;
			
			[Bindable]
			/**
			 * An URL for a choosen player.
			 **/
			public var playerAsset:String;
			
			/**
			 * An URL for the AS2 player
			 **/
			private const as2PlayerUrl:String = "assets/players/as2container.swf";
			
			/**
			 * An URL for the AS3 player
			 **/
			private const as3PlayerUrl:String = "assets/players/as3container.swf";
			
					
			protected function onInjectionComplete(event:Event):void
			{
				if (model.proof)
				{
					playerObserver.enabled = true;
					frameRateObserver.enabled = true;
					model.getSwfAsset();
				}
				else 
				{
					proofObserver.enabled = true;					
				}
			}
			
			/**
			 * When the proof type is eiter ANIMATION or APPLICATION
			 * let's launch it.
			 **/
			protected function onProofChanged():void
			{
				if (model && model.proof)
				{
					if (!model.previousProof || (model.previousProof && ((model.proof.token != model.previousProof.token) || (model.proof.type != model.previousProof.type))))
					{     
						if (model.proof.type == ProofType.SWF_ANIMATION || model.proof.type == ProofType.SWF_APPLICATION)
						{
							model.getSwfAsset();
						}
					}
				}
			}
			
			/**
			 * Based on SWF AS version (either 2 or 3) we load a proper player
			 **/
			protected function onPlayerTypeChanged():void
			{				
				if(model.swfDetailsVO && model.swfDetailsVO.asVersion == ActionScriptVersion.ACTIONSCRIPT2)
				{
					playerAsset = as2PlayerUrl;
				}
				else if(model.swfDetailsVO && model.swfDetailsVO.asVersion == ActionScriptVersion.ACTIONSCRIPT3)
				{
					playerAsset = as3PlayerUrl;
				}
				else
				{
					playerAsset = null;
				}
			}
			
			protected function onFrameRateChanged():void
			{
				systemManager.stage.frameRate = model.swfDetailsVO.frameRate;
			}
			
			/**
			 * When CREATE_SNAPSHOT_INTERNAL_EVENT event type is dispatched from PM
			 * we take a snapshot of swfContainer which contains a player and a SWF file,
			 * and we store it in swfSnapshot property in PM. 
			 **/
			protected function handleCreateSnapshotEvent(event:Event):void
			{
				var bitmapData:BitmapData = content as BitmapData;
				var bitmap:Bitmap = new Bitmap(bitmapData, PixelSnapping.NEVER, true);
				model.swfSnapshot = bitmap;
			}
			
			/**
			 * Gets bitmap data of swfContainer.
			 * The bounds derive from the SWFs stage size. 
			 **/
			override public function get content():BitmapData
			{
				var bitmapData:BitmapData = new BitmapData(model.swfDetailsVO.width, model.swfDetailsVO.height);
				bitmapData.draw(swfContainer);
				
				return bitmapData;
			}
			
			/**
			 * Measured size comes from SWFs stage size
			 **/
			override protected function measure():void
			{
				super.measure();
				
				if(model && model.swfDetailsVO)
				{
					measuredHeight = model.swfDetailsVO.height;
					measuredWidth = model.swfDetailsVO.width;
				}
				else
				{
					measuredHeight = measuredWidth = 0;
				}
			}
			
		]]>
	</fx:Script>
	
	<!--
	A container which stores loaded player
	and the SWF stage background. 
	-->
	<s:Group id="swfContainer"
			 width="{model.swfDetailsVO.width}"
			 height="{model.swfDetailsVO.height}"
			 x="{-(model.swfDetailsVO.width * 0.5)}"
			 y="{-(model.swfDetailsVO.height * 0.5)}"
			 clipAndEnableScrolling="true">
		<s:Rect width="100%"
				height="100%">
			<s:fill>
				<s:SolidColor color="{model.swfDetailsVO.backgroundColor}" />
			</s:fill>
		</s:Rect>
		<s:SWFLoader id="player"
					 mouseEnabled="{!model.swfSnapshot}"
					 mouseChildren="{!model.swfSnapshot}"
					 source="{playerAsset}"
					 complete="model.playerLoaded()"
					 unload="model.playerUnloaded()"
					 loadForCompatibility="true" />
	</s:Group>
	
	<!--
	A displayed snapshot
	-->
	<s:BitmapImage source="{model.swfSnapshot}"
				   x="{swfContainer.x}"
				   y="{swfContainer.y}"/>
		
		
</renderer:ProofRenderer>
